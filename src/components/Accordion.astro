---
interface Props {
    title: string;
    details: string;
}

const { title, details } = Astro.props as Props;
---

<div class="accordion group relative rounded-md border border-purple-900">
    <button
        class="accordion__button flex w-full flex-1 items-center justify-between gap-2 p-3 text-left font-medium transition hover:text-purple-500 sm:px-4"
        type="button"
        id={`${title} accordion menu button`}
        aria-expanded="false"
        aria-controls={`${title} accordion menu content`}
    >
        {title}
        <svg
            class="accordion__chevron h-7 w-7 shrink-0 transition-transform"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            ><path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m6 9l6 6l6-6"></path></svg
        >
    </button>

    <div
        id={`${title} accordion menu content`}
        aria-labelledby={`${title} accordion menu button`}
        class="accordion__content hidden max-h-0 overflow-hidden px-3 transition-all duration-300 ease-in-out sm:px-4"
    >
        <p class="prose mb-4 mt-1 max-w-full transition-[height]">
            {details}
        </p>
    </div>
</div>

<script>
    function accordionSetup() {
        const accordionMenus = document.querySelectorAll(
            '.accordion'
        ) as NodeListOf<HTMLElement>;
        accordionMenus.forEach((accordionMenu) => {
            const accordionButton = accordionMenu.querySelector(
                '.accordion__button'
            ) as HTMLElement;
            const accordionChevron = accordionMenu.querySelector(
                '.accordion__chevron'
            ) as HTMLElement;
            const accordionContent = accordionMenu.querySelector(
                '.accordion__content'
            ) as HTMLElement;

            if (accordionButton && accordionContent && accordionChevron) {
                accordionButton.addEventListener('click', (event) => {
                    if (!accordionMenu.classList.contains('active')) {
                        accordionMenu.classList.add('active');
                        accordionButton.setAttribute('aria-expanded', 'true');

                        accordionContent.classList.remove('hidden');
                        accordionContent.style.maxHeight =
                            accordionContent.scrollHeight + 'px';
                        accordionChevron.classList.add('rotate-180');
                    } else {
                        accordionMenu.classList.remove('active');
                        accordionButton.setAttribute('aria-expanded', 'false');

                        accordionContent.style.maxHeight = '0px';
                        accordionChevron.classList.remove('rotate-180');
                        setTimeout(() => {
                            accordionContent.classList.add('hidden');
                        }, 300);
                    }
                    event.preventDefault();
                    return false;
                });
            }
        });
    }

    accordionSetup();

    document.addEventListener('astro:after-swap', accordionSetup);
</script>
